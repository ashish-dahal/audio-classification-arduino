/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 15.11.2022 14:00:08

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 7296;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteEvalTensor tflEvalTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,3250 } };
const TfArray<1, float> quant0_scale = { 1, { 0.053533066064119339, } };
const TfArray<1, int> quant0_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 250, 13, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 250, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 125, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 125, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 1008, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data6[8*1*3*13] = { 
  /* [0][0][][] */ -69,10,47,127,66,-6,75,90,29,-26,-34,-4,-37, 82,-23,-70,-19,7,-59,-67,-75,8,-48,27,57,72, -113,52,27,-59,-87,-42,16,10,42,15,-25,-36,-64, 
  /* [1][0][][] */ -19,-14,-116,-52,110,8,15,-99,75,75,-26,-60,90, 0,12,-13,-27,83,-14,-32,-85,61,-87,-67,100,73, -43,1,-127,41,52,-78,74,-43,-76,-77,81,52,53, 
  /* [2][0][][] */ 26,-41,-6,81,-55,-41,37,48,-30,-34,9,20,28, 6,-19,-34,44,-36,-44,123,-21,-23,-47,44,-19,44, -5,-35,-49,34,-5,-52,127,-10,-51,34,49,-54,13, 
  /* [3][0][][] */ -70,84,-33,73,21,-62,39,85,-15,-12,-34,9,-14, 93,117,-22,53,-55,-71,-7,-3,71,63,-127,54,-70, -4,15,-28,45,-1,14,-42,-31,38,22,-50,65,-47, 
  /* [4][0][][] */ 49,90,-110,-14,31,-80,2,34,-68,2,-28,52,20, 51,31,-52,34,-31,-66,-44,19,26,5,-35,90,3, 22,-57,19,-45,12,-91,98,27,-54,-127,67,80,-93, 
  /* [5][0][][] */ 73,31,18,-24,18,-27,10,40,-3,-12,26,-58,71, 39,-54,2,-45,82,-69,45,20,-81,75,-42,-76,-15, 127,-33,-9,-7,54,7,-64,64,-71,91,-38,-53,-11, 
  /* [6][0][][] */ -100,17,-127,-126,-89,-29,29,-7,-12,58,-2,34,28, -42,61,-2,70,-14,14,-92,-66,-17,-45,75,-26,-70, -105,-64,9,-79,-93,-50,40,70,-20,98,-6,-19,1, 
  /* [7][0][][] */ 21,-57,58,48,2,-45,0,28,-14,40,-22,7,-14, 101,-11,74,-71,27,91,-127,15,-30,38,27,63,74, 10,-96,121,22,-73,10,-10,-90,-30,-25,50,-38,31, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,13 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0039037305396050215, 0.0030032747890800238, 0.0038676760159432888, 0.0035233285743743181, 0.0032050579320639372, 0.0030492383521050215, 0.0031430120579898357, 0.0035756577271968126, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { -918, -938, -1491, -1715, -1962, -1815, -2214, -1721, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 0.00020897865761071444, 0.00016077450709417462, 0.00020704854978248477, 0.00018861457647290081, 0.00017157658294308931, 0.00016323507588822395, 0.00016825507918838412, 0.00019141592201776803, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[16*1*3*8] = { 
  /* [0][0][][] */ -29,-56,-48,77,-26,-84,55,-13, 80,-49,-86,23,-32,-127,49,-28, 44,-86,47,56,12,60,54,13, 
  /* [1][0][][] */ -76,76,-49,-57,-15,-23,20,12, -69,-29,-56,16,-27,22,-66,-20, 38,85,47,127,94,-45,-85,15, 
  /* [2][0][][] */ -44,69,-92,-76,-8,127,-80,-28, 119,11,-53,99,30,-8,-96,109, -1,-111,-59,-20,-38,-18,-34,-5, 
  /* [3][0][][] */ -127,53,10,3,-89,89,-37,107, -45,-21,39,90,53,56,6,-3, -49,-52,58,51,-99,62,2,-65, 
  /* [4][0][][] */ -28,-27,30,6,41,-84,-75,19, -101,-67,53,-61,-75,-90,-25,68, 12,-98,92,57,-56,37,-127,90, 
  /* [5][0][][] */ 22,-61,-120,68,45,101,-50,77, -80,-40,-127,35,19,49,-51,-47, -64,-48,-13,13,7,-14,-50,62, 
  /* [6][0][][] */ 6,21,51,50,42,43,-127,-8, -22,38,70,-111,-1,82,-50,-121, -33,62,-15,15,41,-83,-52,-12, 
  /* [7][0][][] */ -74,-43,4,-38,-72,104,7,73, -7,-98,-69,-4,65,50,19,-81, -127,-127,-75,-31,21,43,-43,64, 
  /* [8][0][][] */ -115,-65,69,-44,-62,25,-32,94, -68,-30,-62,85,7,35,-7,76, -71,-127,-4,-89,-34,-64,36,62, 
  /* [9][0][][] */ -29,-45,39,41,78,67,-127,-37, -56,85,105,-25,51,-11,-1,-68, -75,-12,107,-22,17,-37,-6,-4, 
  /* [10][0][][] */ 13,-39,-17,6,3,-68,-53,12, 127,-34,20,42,74,36,99,-19, -30,-4,-35,-64,-86,-20,63,-27, 
  /* [11][0][][] */ 46,-13,-29,84,-88,-29,59,-3, -59,100,13,-66,-127,-5,62,73, 39,47,-108,62,52,-110,96,-7, 
  /* [12][0][][] */ 41,-23,-99,-16,43,53,-5,-75, -19,14,17,-64,20,-127,17,35, 0,33,-70,-119,-47,16,7,88, 
  /* [13][0][][] */ -29,3,-40,94,-9,-17,-19,-127, -112,-18,22,9,85,8,-90,-98, -26,-112,6,73,24,29,45,-54, 
  /* [14][0][][] */ -18,46,68,6,-9,32,-67,-127, -46,104,-34,18,88,-3,-120,-88, -38,111,52,-36,66,18,-99,-36, 
  /* [15][0][][] */ 65,-10,-23,105,-75,-104,-72,7, -47,-13,0,-127,87,32,62,-15, 57,-94,34,-66,-67,7,-114,79, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0037703118287026882, 0.0033334880135953426, 0.0028647065628319979, 0.0028035261202603579, 0.0032947475556284189, 0.0032607237808406353, 0.0029586777091026306, 0.0034419181756675243, 0.0033090598881244659, 0.0032869537826627493, 0.0035019183997064829, 0.0026091730687767267, 0.0032044707331806421, 0.0032315929420292377, 0.0031289441976696253, 0.0029583533760160208, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[16] = { -1109, -817, -1118, -1799, -1522, -1187, -1565, -289, -1471, -1074, -1881, -2816, -1809, -41, -1021, -1500, };
const TfArray<1, int> tensor_dimension9 = { 1, { 16 } };
const TfArray<16, float> quant9_scale = { 16, { 0.00014054676285013556, 0.00012426318426150829, 0.00010678831313271075, 0.00010450767149450257, 0.00012281905219424516, 0.00012155073636677116, 0.00011029129382222891, 0.00012830515333916992, 0.00012335256906226277, 0.00012252852320671082, 0.00013054179726168513, 9.7262731287628412e-05, 0.00011945377627853304, 0.00012046482152072713, 0.00011663835903163999, 0.00011027920845663175, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[4*1008] = { 
  -21, -26, 14, 18, -16, -6, 8, -11, 28, 8, 34, 3, -1, 3, -5, 12, 29, 35, -37, -15, -41, -33, -39, -25, -38, -51, 22, -6, -7, 28, -38, -68, 9, 28, -34, -20, -25, -33, 9, -8, -25, 28, 2, 27, -16, -45, -33, -46, -20, 30, 31, 7, 14, 21, -34, -30, 28, 27, -10, -8, 32, 4, -11, 42, -5, -29, 33, -1, 17, 50, 14, -17, -4, -13, -54, -12, -9, -19, 10, 63, 6, -45, -45, -20, -30, -12, -41, 2, 38, -34, 28, 31, -14, -17, -12, 4, -34, -9, -19, -17, -16, -13, -4, -28, -22, -45, -24, 1, -31, -24, -22, -48, 36, 44, 37, -11, 20, -32, -26, -6, -25, -17, -11, -5, -42, 53, 16, -50, 35, 8, -4, 16, -10, -43, -7, -19, 24, -3, -15, 38, -36, 32, -2, 2, -26, 26, -54, -12, -12, -9, 1, -43, -25, -14, -32, 23, -41, 45, 27, 45, 22, -17, -10, -47, 36, -20, -60, -30, -34, -35, -32, -6, -27, -27, -21, -11, 29, 16, -11, -9, -13, -3, -9, -35, 54, 58, -3, 14, -2, 36, 17, 22, -35, -3, -19, -39, 10, 8, 24, 9, 16, 21, -25, -36, -4, -13, 31, -2, -35, -26, -23, -49, 10, 17, -7, -66, -1, 2, 1, -21, -6, -25, 25, 3, -16, 4, -38, -31, -2, 13, 15, -49, -14, 31, -21, 1, 10, 9, -5, -17, -58, -24, -11, -10, 13, -33, 16, 7, -20, -2, -1, -27, -11, 19, -5, -20, -57, 17, -5, 21, -2, 13, 22, 58, 3, 12, -14, -14, 7, -5, 37, -6, -7, -39, -55, -34, 1, -1, 26, -32, 4, 15, 0, -23, 24, -30, 8, -10, -17, 1, -8, -37, 37, -57, 24, -36, 16, -14, 23, 5, 25, -28, 53, 11, -67, -6, 21, -1, -25, 7, 1, 11, 18, 11, -1, -56, -19, 36, 14, -13, -18, 9, -39, 19, 15, 7, -10, 34, -8, -28, -23, -46, -8, 15, -48, -11, 32, -43, -59, 16, -31, -12, 26, 8, -27, 32, 59, -55, -12, 55, -7, 32, -17, 13, -30, -21, -2, -4, 26, -19, -31, 38, -50, -26, -28, 43, -9, 5, -17, -14, -19, -12, 3, 0, 23, -31, 26, 11, -14, -26, 22, 8, 14, -13, -37, -32, 13, 39, 20, 6, -3, 12, 17, -8, -9, -15, -2, -38, -32, 3, 10, -62, -44, -12, -34, -18, -19, -11, -7, 11, 26, -29, -53, 4, 8, 15, 8, 47, 22, 19, -39, 12, 8, 11, -3, 18, 4, -18, -22, 24, 24, -19, 17, -27, 64, 2, 40, 3, -13, -6, 20, 15, -9, 23, -25, 7, -5, 36, 11, -3, -12, 34, 45, 26, -39, -35, 37, -12, -20, 36, -17, 29, -10, 0, 3, -24, 31, 17, 12, 7, 48, 28, 5, 4, 23, -24, 35, 9, -17, 16, -36, 15, -8, 11, 12, 53, 11, -2, 13, 35, -74, 60, -14, -1, 84, 3, -17, 8, 60, 26, 28, 40, 14, 48, 35, 15, 1, 0, 36, 45, -7, -23, 11, -16, -8, 24, 29, 60, -29, 18, -11, -29, -18, -48, 34, -13, -53, 9, -59, -19, 57, 35, 25, 34, 36, 30, 97, 14, -22, -4, 37, -25, -18, -16, -29, 66, 20, 32, 25, -17, -15, 65, 58, -5, -28, 26, 14, -14, -40, 21, 11, -26, 6, 7, 44, -31, -21, 18, 13, 38, 25, 13, -1, 38, -20, -17, 10, -19, -46, -8, 4, 23, -48, 54, 54, -44, 8, 28, -53, 18, -36, 6, -24, 0, -23, 16, -16, 16, -14, 32, 24, -35, -41, -43, 9, -25, 29, -74, -77, -21, -31, -35, 4, -9, 42, 9, -13, 17, -69, 18, 40, -10, 56, 6, -31, 15, 23, 7, 38, -10, 14, -15, 37, 3, -57, 25, 44, -38, 48, -7, -36, 59, 66, 19, 9, 55, 8, 14, 9, -23, 21, -33, -16, -4, -43, 36, -19, -52, 18, 14, -37, 30, 1, 71, 36, -41, -17, 43, 46, -43, 2, 34, -8, 13, 72, 32, 26, 13, 3, 73, 30, -29, 13, 29, 31, -26, 1, 51, -11, -41, 47, 19, -4, 52, -27, 66, 45, -1, 2, -7, 11, -15, -22, 9, 6, -16, 21, 1, -31, -10, 11, 27, 38, 1, -33, -1, 13, -60, 11, -3, 19, -18, 25, -9, -6, 32, -21, 47, 28, -1, 35, 38, 39, 22, 20, 25, -13, 41, -13, -12, 34, 47, -20, 62, 56, 7, 2, 20, 22, -88, -5, -1, 35, 30, 11, 4, -15, 42, 16, 16, 5, 37, -14, -15, 21, 39, 34, -35, 3, 6, 47, 18, 43, 7, 51, 10, 1, -4, 16, -12, -10, 82, 56, -16, 42, -9, 10, -4, 3, 1, 7, -3, -3, -35, -23, 15, 14, 27, 51, 31, -6, 8, 58, -18, -16, 25, 9, 22, 23, -13, 4, 28, 18, -27, 18, 27, 8, -53, -29, -7, 5, 4, -31, -60, 8, -38, -1, 26, -43, 4, -15, -36, 6, 49, -78, -2, 1, -40, 11, -51, -51, 5, 17, -33, -50, 35, 11, -9, 12, 2, -21, -23, -29, 0, 26, -5, -6, 48, 31, -4, 16, 18, 9, 28, 13, 38, 3, -8, -13, -10, -19, -7, -17, 6, -78, -4, 1, -21, 7, -14, -34, 53, -25, 17, -1, 16, 39, -30, -12, 21, 9, 18, -37, 6, 45, 0, -20, 6, 29, -32, 8, -22, -13, 16, 12, -35, 18, -4, -24, 50, 38, 101, -11, -15, -1, -13, -21, 15, -1, 21, -25, -52, -2, 13, 16, -15, -7, -2, -11, 28, 51, 30, -7, 46, -21, 35, 8, -2, 8, 11, 8, 7, 24, -31, 0, 23, 12, -32, -35, 11, 11, 12, 35, 18, -89, 15, -24, 17, -16, -47, 46, 47, -15, 13, 37, -54, -2, -72, -7, 19, 45, 36, -25, -7, 9, 1, -3, -7, -33, 20, -20, -22, 27, -26, 1, 7, -36, 15, 35, -17, 45, -33, -57, -5, -25, 28, -26, -40, -13, -6, -10, 68, 38, -53, -10, -77, -23, -67, 
  36, 9, 18, -23, -18, 16, 13, -35, -22, 17, -24, -12, -36, 29, 24, 4, -28, -49, 24, -7, -15, 5, 24, -3, -3, 29, -34, -25, -8, -12, 0, 34, -13, -60, -47, -10, 4, -51, -51, -28, -13, -14, -4, -15, -10, 23, -9, 38, 10, -2, -65, -19, -12, -19, -17, 6, -22, -36, -13, -10, -15, -38, -19, -24, -35, 26, -21, -22, -14, -70, -31, -14, -11, 8, 40, 28, 20, 12, -4, -65, -40, 61, 23, -3, -33, -13, -10, -4, -44, 18, -70, -6, -23, -30, 27, -19, -9, -3, 0, -17, 41, -32, 10, -11, 20, 35, 3, 0, 5, -40, 14, -2, -37, -12, -25, -5, -21, -6, 8, 6, -5, 19, -13, -29, 23, -61, 4, 25, -32, -6, -51, -19, -11, -33, 20, 16, -14, -26, -30, -29, -13, -21, -8, 1, 1, -27, 1, -25, -15, 31, -35, 45, -17, -27, -24, 6, 26, -28, -5, -67, -19, -21, -10, 12, -52, -8, 58, -13, 21, 18, -3, 1, -17, 48, 8, -32, 11, 15, -26, 3, -26, 22, -6, 13, -32, -70, -14, -29, -22, -9, -27, -8, 22, 9, -40, 6, 5, -28, 20, -15, -20, -6, 5, 36, 0, 18, -7, 21, 16, 27, 28, 18, -30, -5, 25, 39, 13, -17, 0, 0, -21, 21, -22, -79, 4, -18, 21, -2, -8, 1, 22, 48, 16, 16, 9, 30, -2, -6, 21, -4, 30, 66, 14, -9, -29, 20, -4, -16, 12, 28, 20, -5, -1, 9, 49, 21, 44, 13, -41, -1, 17, 16, -21, -2, 26, -10, 16, 30, 40, 36, 13, -6, 1, 16, 39, 59, 38, 37, 5, 27, 4, 23, -26, 16, -29, 40, 31, 14, -12, 27, 34, 15, -28, 71, 14, 47, 26, 19, -15, -4, 34, 50, 13, 2, 15, 6, -22, 13, 52, 8, 42, 2, -10, 45, -26, -5, -10, -28, 7, -7, -21, -16, 43, 6, 12, 9, 21, 9, 36, 38, 21, -5, 15, -32, 50, 7, -50, 54, 50, 18, 46, -12, 11, 1, 53, -5, -72, -16, 36, -35, 27, -40, -6, 4, 43, 55, 34, 15, 18, 23, 47, 14, 16, 8, -1, -11, -14, -4, -1, 19, 30, 29, 26, 10, 0, 24, 35, 17, -25, 13, -22, 4, -9, 2, -3, 53, -1, 29, 10, 16, 26, 26, 11, 13, 17, -30, 24, 21, 54, 19, -12, 44, 74, 7, 42, 31, 48, -11, 40, 14, -26, -20, 43, 1, 11, 4, -28, -13, -18, 49, 31, -11, 32, -29, 37, 43, -7, 23, 14, -60, 8, 21, -96, 3, -48, 34, 8, 8, 15, -21, 9, 9, -19, -34, 13, -36, 18, -12, -61, 31, 14, 31, 5, -9, -5, 36, -15, 41, -17, -23, -14, 1, 23, -27, 23, 74, -29, 8, 6, 12, 16, -6, 46, 17, -24, 30, -4, 22, 62, -20, 75, -33, -1, 8, 17, -30, 18, -34, -4, 5, 49, -81, 24, 14, -34, 20, 8, -2, -38, 3, 19, -23, -6, -43, -2, 43, -27, -1, -31, 2, 6, 35, 13, 11, -29, 51, -17, -10, 32, -2, 21, 32, -26, -12, -7, 27, 47, -35, 25, 24, -38, 2, 7, -17, 28, 15, -43, 52, 14, -23, -22, 49, 55, -25, 18, -17, -10, 27, -19, 34, 30, -24, -27, 44, 9, 4, -21, 14, 34, -26, -16, 56, -23, -18, -21, 29, 41, -12, -25, -13, -25, -31, -9, -26, 63, 3, -25, 12, 28, 4, 19, -34, 19, -83, -26, 48, -6, -12, 22, 6, 54, 3, 11, -5, -25, 15, 43, 10, -2, 9, -33, 14, 40, 8, 6, 22, -13, 53, 63, 1, 16, 15, 17, -6, -33, 2, 6, -29, 23, 5, -45, 14, -14, -36, 10, -10, -45, 23, -11, 9, -2, 5, -28, 20, 31, -41, -35, 24, 40, 9, 15, -53, -4, -24, -25, -21, 35, -39, 15, -1, -2, 11, 9, 56, 87, -31, 12, 36, -42, -5, 20, -21, 29, -24, -32, 47, -23, -14, -46, 62, -3, -64, -17, -8, -94, -22, -30, -10, -2, -41, -6, 27, -28, -47, -62, 64, 8, -32, -4, 44, -32, -6, 15, -3, -10, -56, -46, 8, -10, -1, 16, 63, 25, 11, 6, -6, -29, -9, 8, 4, 8, -30, 12, 41, 29, -14, -11, 70, -6, 26, -30, 7, -70, 15, -3, -36, 19, -39, -22, -12, -46, -47, -42, -6, -33, -26, 14, -51, -6, 18, -45, -5, -24, -52, -7, -5, 29, -18, -34, 37, 29, -30, -1, -94, -52, -32, -12, -38, -24, -13, -1, -26, 3, -3, -29, -5, -88, 20, 51, -51, -44, 0, -20, -32, -53, 10, 10, -30, -5, -16, -15, -83, -28, -7, -37, -13, -46, 17, 13, -9, -19, 31, 22, 6, -22, -34, -18, -77, -23, -59, -38, 6, -25, -5, 6, -50, -32, -3, -8, 36, -46, -44, -9, -29, -36, -23, -35, -15, -50, -43, -14, -33, -4, -7, 19, 5, -15, -7, 3, -44, 23, -4, -19, -59, 27, -22, 13, -22, -15, 26, 41, -25, 9, -32, 54, -82, -4, -25, -69, -26, 34, 15, 7, -38, 7, 7, 16, -43, -95, -9, -77, -66, -32, -38, -53, -32, -27, -15, -63, -38, -13, -2, -22, -17, 53, -9, 6, -22, 0, -8, 37, -56, 17, -49, 7, -17, -43, 26, -36, 2, -47, -29, 32, -59, -30, -35, -21, -61, -65, 9, -9, -7, -26, 20, 20, 6, -68, -37, -4, -111, -7, -101, -13, 2, -47, 19, 22, -51, -25, -7, 5, 41, -52, -63, -32, -10, -16, 31, 4, -37, -64, -36, -8, -25, 14, -8, 3, -3, -21, 3, -18, -49, -15, -12, 14, -57, -6, 8, -3, 6, -32, 17, -1, -13, 47, -15, 15, -11, 23, 29, -26, -78, -18, -44, -61, 30, 2, 50, -7, -18, -21, -52, -28, 32, -12, -41, 44, -2, 12, -34, -12, -55, -29, 18, -14, -36, 29, -38, -38, 2, -28, 19, 57, 27, -27, -53, -52, 30, -24, -13, -72, -70, -28, -9, -26, 62, 10, 53, 
  -38, -13, -36, 46, 58, -10, -40, 41, 11, -34, -13, -4, -24, 0, -33, 0, 9, -23, -8, 59, 38, 67, -36, 52, 44, 55, 19, 24, 16, 13, 12, 34, -12, -16, 78, 63, -12, 62, 44, -14, 18, -9, -22, -3, -19, 2, 23, 13, 57, -4, -2, 25, 25, 2, 7, 19, -11, 3, -11, 14, -27, 31, 5, -9, 35, -7, -16, 23, 11, 31, 22, 31, -22, 26, 46, -22, -8, 68, -2, 1, 33, 8, 4, 20, -4, 39, 15, 20, 31, 6, -1, -12, 0, 37, -68, -4, 45, -43, 29, 34, -23, 50, -13, 27, -3, 14, 1, 3, -39, 35, 7, 64, -11, -36, 32, 4, 13, 0, -17, 39, -8, -12, 12, -8, 26, -5, -39, 9, 18, 37, 50, -7, 0, -1, -52, 35, -14, -34, 15, 14, 21, -18, -23, 4, 50, 9, 8, -4, 4, 12, -5, -10, 12, -11, 38, 3, -18, -17, 11, -38, -2, 9, 14, -11, -39, -3, -27, -12, -7, 4, 28, 3, -6, -10, -47, 6, 7, -64, 2, -40, 28, -18, -27, 47, -30, -28, 2, 10, 15, -61, -44, 24, 23, 19, 89, 9, 29, 37, -13, 4, 53, -7, 17, -22, 3, 12, -40, 18, -22, -20, -7, 45, -5, 15, 35, 0, 8, 20, -20, 37, 0, -44, -52, 49, -18, 5, 60, 16, -3, 3, 20, 29, 12, 5, 9, -15, 12, -51, -68, -11, -17, -10, 4, -28, 10, -32, 36, -4, -30, -13, -23, -20, -7, -61, -4, 13, 19, -13, 41, 6, -29, -10, -29, -18, -23, -5, 4, -10, -37, -95, -40, -13, 14, -43, -52, -32, 2, -1, -10, -5, -29, -63, 12, 14, -8, -27, -42, 66, 24, -22, 36, -18, 9, -47, -16, -16, -8, -24, -9, -15, 0, -40, -61, -8, 59, 47, 13, -17, -82, -36, -3, -33, -30, -4, 22, 26, -7, -57, -11, 12, -6, 23, 21, -9, -2, -53, -22, -55, -34, -73, 2, 23, 23, 7, -49, 10, 23, -47, -22, -41, -13, 16, -14, -38, 6, -30, 16, 37, 13, -45, -14, -12, 22, -21, 9, -54, -64, -22, -32, -39, -31, -3, 15, 24, 33, -55, 11, 18, -23, 38, -12, -14, -52, -31, -2, 8, -48, -49, 30, 43, 24, -81, 0, -33, 19, -17, 22, -6, -28, -7, -1, -6, -40, -24, 19, 26, 5, -12, -73, -44, 48, 3, -28, -35, -37, -32, -18, 8, 18, -52, 34, 48, -15, 5, -52, -6, 23, -70, -9, -50, -56, -63, -75, 18, -11, -98, 10, 49, 15, -82, -120, 15, 73, 18, -1, -29, -61, 19, -40, -1, -48, -79, 38, 36, -18, -11, -38, 39, 33, 7, -37, -40, -32, -3, 19, 15, -37, -34, 53, 26, -24, 5, -86, 39, 12, -61, -25, -28, -36, -31, -43, -34, -8, -48, 32, 21, -18, -63, -54, -7, -18, -4, 18, -18, 6, -43, -36, 6, -14, -83, 31, 18, 0, -86, -50, 7, -13, -40, -24, -7, -40, -5, -43, -47, -34, -27, 8, 12, -32, -94, -39, -5, 21, 29, 49, -24, -41, -42, -29, -40, -29, -40, 43, 68, 36, -82, -34, 57, 67, -5, -14, -47, 6, -59, -36, -35, -27, -60, 38, 30, 0, -34, -62, 43, 24, -61, -8, -55, -35, -28, -28, -25, -10, -21, 5, 20, 43, -56, -37, 33, 24, -16, -30, -39, 8, -14, -4, 31, -36, -18, 43, 29, 34, -48, -24, 48, -31, -33, -17, -2, -8, -8, -21, 27, -2, -51, 17, 1, 32, -49, -74, -53, 41, 1, 2, -9, -10, -5, -40, 3, -10, -41, 22, 42, 23, -49, -59, 65, 21, -21, 6, -4, -16, 16, -13, 11, 11, 4, 37, 35, 37, -4, -57, 51, 59, -23, -6, -12, -3, -7, -58, 14, -2, -37, 76, 25, 0, -4, -127, -22, 38, -20, -68, -76, -43, -19, -20, 3, 5, -5, 4, 21, -18, -26, -71, 12, 34, 54, 18, -52, -3, 10, 5, -42, -54, -4, 18, 10, 0, 8, 14, 54, 31, -8, -44, 15, 2, -33, -26, -40, -44, -2, 30, 28, 38, -18, -33, 12, 7, 12, 4, 5, -4, -22, 20, -20, -9, 37, 48, 35, 2, -40, -44, -16, 50, 28, 22, 7, 2, -13, 6, -41, -41, 22, 27, 30, 7, -7, -34, 53, 34, 10, 65, -8, -17, 16, 19, -1, -39, -39, 57, 15, -6, -48, 22, 6, 21, 68, 18, -35, -38, 0, 18, 4, -98, -20, -1, 0, 42, -10, -4, -3, -7, 41, 17, 3, 30, 12, 26, -10, -36, 30, 14, 1, -12, -44, 56, 3, -17, 30, 6, -3, -22, -9, 36, -25, -7, 19, -4, 12, 54, -20, 19, 33, 23, 21, -12, 0, 3, 1, -33, -35, 21, 2, 29, 29, -9, 32, 4, 22, 14, 35, -45, 41, -5, -6, -15, -25, -8, -3, 70, 36, -18, 50, -19, 19, 64, 37, 76, 12, 30, 83, 5, 31, -8, 2, 14, 22, 30, 21, 46, 46, 20, -19, 55, 38, -15, 89, 51, 11, -3, 26, 49, 38, 4, -18, 2, 25, 46, 37, 17, -28, 45, 16, 5, -17, -7, -16, 39, 42, 25, 29, -8, 15, 57, -16, 63, 42, 49, 44, 17, 43, 35, -5, 46, 21, 37, 69, -33, 43, 34, -16, 32, 53, 48, 34, -10, 39, 37, -1, 58, 37, 47, 40, -35, 2, 52, 70, 38, 26, 42, 45, 48, -12, 4, 0, 30, 42, 8, -9, 7, 14, 35, 21, 62, 21, 3, 26, 43, -29, -2, 51, 41, 50, 6, 28, 47, -23, 13, 28, 46, -6, 38, 15, 21, -34, -13, 1, 74, 28, 12, 4, 23, 35, -20, 22, 8, -3, 16, -6, -21, 2, 21, -3, -2, 12, 4, 18, 9, 2, -12, 25, 49, 20, 16, 15, 18, 18, 35, -1, -25, -4, 65, -54, -4, 37, -19, -3, 37, 27, 68, 39, 19, 45, 56, 18, 18, -10, 37, 5, -15, 26, -65, -13, 58, 20, 82, 72, 29, 17, 71, 1, -3, 39, -1, -11, 18, -9, 
  3, 45, 49, 25, 26, 10, 17, -7, 11, 40, 13, 17, 35, 29, 20, 36, 3, 34, 54, 12, 38, 62, 17, 40, 54, 42, 6, 46, 26, 82, 17, 24, 17, -3, 38, 36, 17, 28, 33, 26, 32, 33, 9, 22, 10, 33, 37, 5, 23, 33, 53, 45, 37, 19, 11, 44, 17, 20, -2, 40, 35, 49, 10, 0, 28, 53, 22, 28, 44, 48, 41, 15, 24, 65, 8, 7, 42, 41, 20, 7, 46, 39, 48, 45, 19, 31, 29, 24, 46, 51, 26, 33, 40, 61, 34, 11, 36, 21, 21, 36, 21, 56, 38, 60, 32, 28, -2, 14, 36, 97, 16, -2, 35, 50, 49, 26, 37, 22, 8, 42, 29, 56, 11, 19, 31, 106, 30, 8, 28, 24, 53, 55, 15, 34, 32, 30, 18, 20, -7, 23, 5, 57, 19, 2, 21, 23, 17, 64, 18, 37, 14, 55, 28, 20, 24, 15, 12, 18, 4, 28, 28, 18, 70, 39, 22, 26, 34, 47, 25, 31, 12, 27, 23, 125, 5, 13, 16, 16, 34, 42, 26, 35, 31, 38, 12, 17, 18, 27, 15, 34, 6, 26, -19, -20, 90, 45, 9, 56, 23, 41, 48, 43, -7, 18, 8, -68, 28, -16, 50, -12, -29, 2, -26, -45, -30, -7, -22, -37, 17, 33, 22, -45, -51, 2, 45, -63, -17, -9, -35, -66, -4, 2, -30, -54, 8, 26, -52, -6, -16, -5, 55, -62, -39, -17, -45, -35, -35, -1, -55, -49, 21, 15, -32, 18, -40, -20, 40, -37, -46, -5, -30, -86, -36, -30, -12, -51, 29, -7, -4, -36, -36, 3, 52, -20, -45, -54, -15, -51, -48, -30, -47, -55, -14, 22, -3, 6, -30, -29, 18, -11, -41, -37, -22, -61, -28, -5, -15, -31, 10, 21, -21, 24, -9, -6, 39, -65, -10, -49, -50, -29, -23, -34, -23, -41, -27, 5, -42, -9, -52, -22, -4, -8, -42, -31, -43, -30, -25, -4, -41, -61, -4, -7, -23, 35, -37, -14, 11, -39, -54, -27, -21, -19, -20, -52, -29, -37, -25, 10, -49, 22, -45, -4, -11, -11, -20, -19, -29, -46, -21, -28, -44, -13, -31, 6, -39, 3, -26, -44, 13, -62, -31, -51, -32, -30, -27, -28, -49, -39, 11, -4, -35, -20, -52, -2, -6, -58, -40, -46, -42, -81, -17, -15, -35, -67, -26, -14, -49, -16, -77, -30, -13, -62, -24, -59, -35, -47, -37, -18, -35, -45, -33, -42, -11, -58, -42, -36, -24, -27, -27, -47, -17, -39, -22, -47, -63, -54, -46, -15, -25, -52, -54, 1, -28, -27, -9, -10, -56, -44, -30, -25, -47, -39, -33, -20, -5, -35, -31, -18, -50, -23, -31, -46, -23, -27, -55, -6, -49, -49, -6, -51, -54, -50, -36, -19, -30, -42, -44, -43, -7, -30, -13, -42, -40, -14, -42, -27, -33, -60, -30, -33, -72, -33, -39, -48, -12, -8, -36, -45, -41, -21, -12, -15, -52, -32, -44, -12, -40, -33, -12, -5, -29, -11, -8, -45, -26, -25, -45, -55, -43, -60, -40, -22, -46, -19, -25, -15, -13, -12, -50, -40, -19, -19, -42, -9, -28, -29, -47, -14, -22, -41, -43, -33, -24, -45, -22, -2, -50, -27, -8, -48, -4, -23, -35, -19, -50, -30, -1, -42, -45, -5, -10, -4, -31, -18, -4, -42, -32, -13, -16, -22, -14, -6, -29, -53, -32, -29, -10, 1, -39, -52, -37, -43, -39, -43, -3, 4, -50, -27, -4, -18, -36, -10, 6, -19, -4, -19, -4, -43, -36, -17, -30, -10, -27, -18, -2, -7, -20, -24, -24, -35, -8, -27, -55, -12, -43, 9, -22, -26, -43, -3, -15, 0, -31, -3, -25, -10, -21, -34, -19, -18, -36, -19, 0, -24, -38, -15, -9, -10, -9, -2, -18, -22, -7, -23, -33, -5, -48, -26, 12, -15, -28, 4, -16, -4, -5, -31, -43, -27, -46, -30, -49, -33, 4, -3, -24, -16, -36, -5, -6, -41, -4, -22, -11, -16, -11, -20, -34, -6, -1, 0, 1, -1, -28, -15, 7, -21, 2, -2, 13, -9, 3, -41, -18, -25, -7, -3, -2, 3, -22, -9, -3, -5, 3, -43, -7, -3, -45, -36, -35, -10, -1, 3, -16, 16, -40, -7, -10, 0, -25, -16, -23, -16, -28, -22, -21, -4, -23, -9, -6, -28, -6, -36, -14, -40, -41, -20, -8, -3, -13, -39, -5, -12, 8, -8, -37, -10, -5, -6, -28, -13, -27, -24, -21, -5, -17, 3, -2, -11, -17, -5, -5, -31, -25, -32, -38, 5, -36, 6, -28, -21, -28, -32, -21, -30, -1, -11, -12, -31, -12, -34, -1, -14, -40, -9, 8, 5, -9, -17, -20, -34, -3, -4, 0, -9, -22, 25, 12, -9, -41, 8, -50, -5, -42, -47, -18, 12, -21, 32, -20, -34, -29, -20, 6, -17, -14, 10, 2, -30, -29, -25, -10, -42, -22, 7, 16, -27, -1, 4, -5, -11, -22, -18, -35, -34, 7, 7, 5, -34, 0, 15, 9, -14, -14, -40, 13, -22, 1, -17, -7, -26, 6, -7, -18, -30, 12, 1, -13, -18, -19, -28, 10, -19, -29, -38, -33, -28, -33, -35, 14, -6, -41, 19, -15, -6, -43, -29, 18, -6, 5, 3, 4, -26, -26, -9, -24, 3, -2, -7, -2, 9, -28, -12, 16, -26, -19, -6, -10, -21, -38, -24, -42, 1, 0, -1, -14, -7, -18, -26, -10, -33, -13, -3, 4, -41, -34, -9, -8, 6, -13, -2, 3, -10, -43, 6, -27, -7, -36, -27, -29, -27, -28, -37, -42, 5, -13, 2, 3, -8, -11, -5, -10, -25, -11, -7, -18, -18, -11, -24, -49, -19, -30, -18, -16, -13, -14, -9, -7, -4, -23, -22, -49, -24, 5, -19, -29, 4, -6, -40, -13, -18, -20, 1, -11, -36, -30, -25, -32, -13, -42, -24, -4, 6, -5, 6, -6, -18, -13, -15, 1, -12, -25, -15, 4, -34, -41, -2, -14, -26, -30, -18, 10, 6, -30, -6, -12, 2, -9, -18, -33, -21, -13, -31, -9, -36, -40, 83, -19, 19, 
};
const TfArray<2, int> tensor_dimension10 = { 2, { 4,1008 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0032513721380382776, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int32_t tensor_data11[4] = { -296, 583, -1005, 1447, };
const TfArray<1, int> tensor_dimension11 = { 1, { 4 } };
const TfArray<1, float> quant11_scale = { 1, { 9.2497328296303749e-05, } };
const TfArray<1, int> quant11_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,250,13 } };
const TfArray<1, float> quant12_scale = { 1, { 0.053533066064119339, } };
const TfArray<1, int> quant12_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,250,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.037277225404977798, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,250,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.037277225404977798, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,125,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.037277225404977798, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,125,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.037277225404977798, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,125,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.028448706492781639, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,125,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.028448706492781639, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,63,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.028448706492781639, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,1008 } };
const TfArray<1, float> quant20_scale = { 1, { 0.028448706492781639, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,4 } };
const TfArray<1, float> quant21_scale = { 1, { 0.11802811175584793, } };
const TfArray<1, int> quant21_zero = { 1, { 13 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,4 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,7 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,8,9 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,10,11 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3264, (TfLiteIntArray*)&tensor_dimension0, 3250, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 312, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 4032, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 3250, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3264, (TfLiteIntArray*)&tensor_dimension13, 2000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 2000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2000, (TfLiteIntArray*)&tensor_dimension15, 1000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 1000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2000, (TfLiteIntArray*)&tensor_dimension17, 2000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 2000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2000, (TfLiteIntArray*)&tensor_dimension19, 1008, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 1008, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1008, (TfLiteIntArray*)&tensor_dimension21, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
